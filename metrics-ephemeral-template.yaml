# Metrics Monitoring template.
#
# This defines all the configurable parameters and other objects that are needed to run the metrics service. This defines prometheus for
# metrics aggregation and grafana for visualization. This template can even be saved in OpenShift namespace as well so that have the
# flexibility to do any project specific customizations. Pls note wherever displayName says *** PLEASE DO NOT CHANGE THIS ***, don't touch
# that as those parameters will be referenced in other places.
#
apiVersion: v1
kind: Template
metadata:
  name: metrics-ephemeral-template
  annotations:
    description: This template defines objects that are required to spin up metrics monitoring pod
    tags: prometheus, grafana, metrics
    openshift.io/display-name: metrics-monitoring-ephemeral
    openshift.io/long-description: "This template provides objects that are required to spin up a metrics monitoring pod. It contains prometheus for metrics aggregation, and grafana for visualization. The database is not stored on persistent storage, so any restart of the service will result in all data being lost."
    openshift.io/provider-display-name: Metrics-OpenShift
labels:
  app: metrics-ephemeral-template
  createdBy: Srinivasa-Vasu
parameters:
  -
    name: PT_APP_NAME
    value: prometheus
    description: Name of the prometheus application
    required: true
    displayName: Prometheus Application Name
  -
    name: GF_APP_NAME
    value: grafana
    description: Name of the grafana application
    required: true
    displayName: Grafana Application Name
  -
    name: SVC_ID
    value: monitor
    description: Name of the service account
    required: true
    displayName: Service Account Name
objects:
  -
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: ${SVC_ID}
  -
    apiVersion: v1
    kind: SecurityContextConstraints
    metadata:
      name: monitor-scc
      annotations:
        kubernetes.io/description: "This provides all features of the restricted SCC but allows users to run with any UID and any GID.
        This mostly inherits anyuid scc."
    runAsUser:
      type: RunAsAny
    seLinuxContext:
      type: MustRunAs
    fsGroup:
      type: RunAsAny
    supplementalGroups:
      type: RunAsAny
    users:
    - system:serviceaccount:openshift-infra:${SVC_ID}
    volumes:
    - configMap
    - downwardAPI
    - emptyDir
    - persistentVolumeClaim
    - secret
    - hostPath
    - nfs
    priority: 1
  -
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: metrics-config
    #common configuration shared between all applications
    data:
      prometheus.conf: |-
        # Sample global config for monitoring
        global:
          scrape_interval:     15s # By default, scrape targets every 15 seconds.
          evaluation_interval: 15s # By default, scrape targets every 15 seconds.
          # scrape_timeout is set to the global default (10s).

          # Attach these labels to any time series or alerts when communicating with
          # external systems (federation, remote storage, Alertmanager).
          external_labels:
              monitor: 'metric-project'

        # Load and evaluate rules in this file every 'evaluation_interval' seconds.
        rule_files:

        scrape_configs:
          # This is to scrape metrics of all the pods, containers, services from the openshift cluster
          - job_name: 'openshift-nodes'
            scheme: https  # remove if you want to scrape metrics on insecure port
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - action: labelmap
                regex: __meta_openshift_node_label_(.+)
            metric_relabel_configs:
              - action: replace
                source_labels: [id]
                regex: '^/machine\.slice/machine-rkt\\x2d([^\\]+)\\.+/([^/]+)\.service$'
                target_label: rkt_container_name
                replacement: '${2}-${1}'
              - action: replace
                source_labels: [id]
                regex: '^/system\.slice/(.+)\.service$'
                target_label: systemd_service_name
                replacement: '${1}'
  -
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${PT_APP_NAME}
      labels:
        app: ${PT_APP_NAME}
    spec:
      triggers:
        -
          type: ConfigChange
      replicas: 1
      selector:
        app: ${PT_APP_NAME}
      template:
        metadata:
          labels:
            app: ${PT_APP_NAME}
        spec:
          volumes:
          - name: ${PT_APP_NAME}-data
            emptyDir: {}
          - name: ${PT_APP_NAME}-config
            configMap:
              name: metrics-config
              items:
              - key: prometheus.conf
                path: prometheus.yml
          containers:
          - name: ${PT_APP_NAME}
            image: prom/prometheus:v1.4.1
            ports:
            - containerPort: 9090
              name: tcp
              protocol: TCP
            volumeMounts:
            - name: ${PT_APP_NAME}-data
              mountPath: /prometheus
            - name: ${PT_APP_NAME}-config
              mountPath: /etc/prometheus
            resources:
            imagePullPolicy: IfNotPresent
          serviceAccount: ${SVC_ID}
          serviceAccountName: ${SVC_ID}
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
  -
    apiVersion: v1
    kind: Service
    metadata:
      name: ${PT_APP_NAME}
      labels:
        app: ${PT_APP_NAME}
    spec:
      ports:
        -
          name: tcp
          port: 9090
          protocol: TCP
          targetPort: 9090
      selector:
        app: ${PT_APP_NAME}
  -
    apiVersion: v1
    kind: Route
    metadata:
      name: ${PT_APP_NAME}
    spec:
      to:
        kind: Service
        name: ${PT_APP_NAME}
        weight: "100"
      port:
        targetPort: "tcp"
      wildcardPolicy: None
  -
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${GF_APP_NAME}
      labels:
        app: ${GF_APP_NAME}
    spec:
      triggers:
        -
          type: ConfigChange
      replicas: 1
      selector:
        app: ${GF_APP_NAME}
      template:
        metadata:
          labels:
            app: ${GF_APP_NAME}
        spec:
          volumes:
          - name: ${GF_APP_NAME}-data
            emptyDir: {}
          containers:
          - name: ${GF_APP_NAME}
            image: grafana/grafana:4.0.2
            env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: monitor
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
            ports:
            - containerPort: 3000
              name: http
              protocol: TCP
            volumeMounts:
            - name: ${GF_APP_NAME}-data
              mountPath: /var/lib/grafana
            resources:
            imagePullPolicy: IfNotPresent
          serviceAccount: ${SVC_ID}
          serviceAccountName: ${SVC_ID}
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
  -
    apiVersion: v1
    kind: Service
    metadata:
      name: ${GF_APP_NAME}
      labels:
        app: ${GF_APP_NAME}
    spec:
      ports:
        -
          name: http
          port: 3000
          protocol: TCP
          targetPort: 3000
      selector:
        app: ${GF_APP_NAME}
  -
    apiVersion: v1
    kind: Route
    metadata:
      name: ${GF_APP_NAME}
    spec:
      to:
        kind: Service
        name: ${GF_APP_NAME}
        weight: "100"
      port:
        targetPort: "http"
      wildcardPolicy: None